
import sqlglot
from sqlglot.expressions import (
    CTE,
    Table,
    Subquery,
    Column
)

def parse_query(query: str):
    parsed = sqlglot.parse_one(query)
    info = {}

    # 1. Collect CTE definitions
    #    e.g. WITH cte_alias AS (SELECT ...)
    for cte_expr in parsed.find_all(CTE):
        cte_alias = cte_expr.alias  # Name after 'WITH cte_alias AS (...)'
        info[cte_alias] = {
            "table_name": "CTE",
            "columns": []
        }

    # 2. Collect physical tables (FROM or JOIN references)
    for table_expr in parsed.find_all(Table):
        alias = table_expr.alias or table_expr.name
        # If multiple references to the same alias exist, we just reuse the same dict
        info[alias] = {
            "table_name": table_expr.name,  # actual table name
            "columns": []
        }

    # 3. Collect subquery aliases (SELECT ... ) sub_alias
    for subq_expr in parsed.find_all(Subquery):
        subq_alias = subq_expr.alias
        if subq_alias:
            info[subq_alias] = {
                "table_name": "Subquery",
                "columns": []
            }

    # 4. Collect columns (only those with a table/alias qualifier)
    for col_expr in parsed.find_all(Column):
        if col_expr.table:  # e.g. 'table_name.column1' or 'a.column1'
            alias = col_expr.table
            # If the alias wasn't already seen as a Table/CTE/Subquery, create a new entry
            if alias not in info:
                info[alias] = {
                    "table_name": alias,  # No known physical table name
                    "columns": []
                }
            # Append this qualified column
            info[alias]["columns"].append(col_expr.name)

    # 5. De-duplicate and sort columns for consistent output
    for alias_data in info.values():
        alias_data["columns"] = sorted(set(alias_data["columns"]))
    if len(alias_data['columns'])==0:
        alias_data['columns']=sorted(set([column.alias_or_name for column in parsed.find_all(Column)]))
    return info


# -------------------------------------------------------------------------
# Example driver code (optional) to test each query and show the output
# -------------------------------------------------------------------------
if __name__ == "__main__":
    # test_queries = [
    #     # 1
    #     "SELECT column1, column2, column3 FROM table_name;",
    #     # 2
    #     "SELECT column1, column2 FROM table_name WHERE column3 = 'value';",
    #     # 3
    #     "SELECT column1, column2, column3 FROM table_name ORDER BY column1 ASC, column2 DESC;",
    #     # 4
    #     "SELECT DISTINCT column1, column2 FROM table_name;",
    #     # 5
    #     "SELECT column1, COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) > 1;",
    #     # 6
    #     "SELECT column1, column2 FROM table_name LIMIT 10;",
    #     # 7
    #     "SELECT a.column1, b.column2 FROM table1 a INNER JOIN table2 b ON a.common_column = b.common_column;",
    #     # 8
    #     "SELECT a.column1, b.column2 FROM table1 a LEFT JOIN table2 b ON a.common_column = b.common_column;",
    #     # 9
    #     "SELECT a.column1, b.column2 FROM table1 a RIGHT JOIN table2 b ON a.common_column = b.common_column;",
    #     # 10
    #     "SELECT a.column1, b.column2 FROM table1 a FULL OUTER JOIN table2 b ON a.common_column = b.common_column;",
    #     # 11
    #     "SELECT column1, column2 FROM table1 UNION SELECT column1, column2 FROM table2;",
    #     # 12
    #     "SELECT column1, column2 FROM table_name WHERE column3 = (SELECT MAX(column3) FROM table_name);",
    #     # 13
    #     "SELECT column1, CASE WHEN column2 > 10 THEN 'High' ELSE 'Low' END AS category FROM table_name;",
    #     # 14
    #     "SELECT column1, column2 FROM table_name WHERE column3 IN ('value1', 'value2', 'value3');",
    #     # 15
    #     "SELECT column1, column2 FROM table_name WHERE column3 BETWEEN '2023-01-01' AND '2023-12-31';",
    #     # 16
    #     "SELECT column1, column2 FROM table_name WHERE column3 LIKE 'prefix%';",
    #     # 17
    #     "SELECT SUM(column1) AS total, AVG(column2) AS average FROM table_name;",
    #     # 18
    #     "SELECT column1, column2, ROW_NUMBER() OVER (PARTITION BY column1 ORDER BY column2) AS row_num FROM table_name;",
    #     # 19
    #     "SELECT a.column1, b.column2 FROM table1 a CROSS JOIN table2 b;",
    #     # 20
    #     "SELECT column1, column2 FROM table_name WHERE EXISTS (SELECT 1 FROM another_table WHERE another_table.column3 = table_name.column3);",
    #     # 21
    #     "SELECT column1, (SELECT COUNT(*) FROM another_table WHERE another_table.column2 = table_name.column1) AS count_column FROM table_name;"
    #     "WITH top_customers AS (SELECT customer_id, SUM(amount) AS total_spent FROM orders GROUP BY customer_id HAVING SUM(amount) > 1000), recent_orders AS ( SELECT customer_id, order_date, amount FROM orders WHERE order_date >= '2024-01-01')"
    
    # ]

    test_queries = [
    # 1. Basic SELECT
    "SELECT column1, column2, column3 FROM table_name;",

    # 2. SELECT with WHERE condition
    "SELECT column1, column2 FROM table_name WHERE column3 = 'value';",

    # 3. ORDER BY clause
    "SELECT column1, column2, column3 FROM table_name ORDER BY column1 ASC, column2 DESC;",

    # 4. DISTINCT to remove duplicates
    "SELECT DISTINCT column1, column2 FROM table_name;",

    # 5. GROUP BY with HAVING clause
    "SELECT column1, COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) > 1;",

    # 6. LIMIT to restrict result set
    "SELECT column1, column2 FROM table_name LIMIT 10;",

    # 7. INNER JOIN
    "SELECT a.column1, b.column2 FROM table1 a INNER JOIN table2 b ON a.common_column = b.common_column;",

    # 8. LEFT JOIN
    "SELECT a.column1, b.column2 FROM table1 a LEFT JOIN table2 b ON a.common_column = b.common_column;",

    # 9. RIGHT JOIN
    "SELECT a.column1, b.column2 FROM table1 a RIGHT JOIN table2 b ON a.common_column = b.common_column;",

    # 10. FULL OUTER JOIN (Not supported in MySQL)
    "SELECT a.column1, b.column2 FROM table1 a FULL OUTER JOIN table2 b ON a.common_column = b.common_column;",

    # 11. UNION to combine results from two queries
    "SELECT column1, column2 FROM table1 UNION SELECT column1, column2 FROM table2;",

    # 12. Subquery in WHERE clause (finding max value)
    "SELECT column1, column2 FROM table_name WHERE column3 = (SELECT MAX(column3) FROM table_name);",

    # 13. CASE WHEN for conditional logic
    "SELECT column1, CASE WHEN column2 > 10 THEN 'High' ELSE 'Low' END AS category FROM table_name;",

    # 14. IN clause with multiple values
    "SELECT column1, column2 FROM table_name WHERE column3 IN ('value1', 'value2', 'value3');",

    # 15. BETWEEN clause for range filtering
    "SELECT column1, column2 FROM table_name WHERE column3 BETWEEN '2023-01-01' AND '2023-12-31';",

    # 16. LIKE for pattern matching
    "SELECT column1, column2 FROM table_name WHERE column3 LIKE 'prefix%';",

    # 17. Aggregations with SUM and AVG
    "SELECT SUM(column1) AS total, AVG(column2) AS average FROM table_name;",

    # 18. Window function (ROW_NUMBER)
    "SELECT column1, column2, ROW_NUMBER() OVER (PARTITION BY column1 ORDER BY column2) AS row_num FROM table_name;",

    # 19. CROSS JOIN (Cartesian product)
    "SELECT a.column1, b.column2 FROM table1 a CROSS JOIN table2 b;",

    # 20. EXISTS with a subquery
    "SELECT column1, column2 FROM table_name WHERE EXISTS (SELECT 1 FROM another_table WHERE another_table.column3 = table_name.column3);",

    # 21. Subquery in SELECT statement
    "SELECT column1, (SELECT COUNT(*) FROM another_table WHERE another_table.column2 = table_name.column1) AS count_column FROM table_name;",

    # 22. CTE (Common Table Expression)
    """
    WITH top_customers AS (
        SELECT customer_id, SUM(amount) AS total_spent
        FROM orders
        GROUP BY customer_id
        HAVING SUM(amount) > 1000
    )
    SELECT customer_id, total_spent FROM top_customers;
    """,

    # 23. CTE with Multiple Queries
    """
    WITH top_customers AS (
        SELECT customer_id, SUM(amount) AS total_spent
        FROM orders
        GROUP BY customer_id
        HAVING SUM(amount) > 1000
    ),
    recent_orders AS (
        SELECT customer_id, order_date, amount
        FROM orders
        WHERE order_date >= '2024-01-01'
    )
    SELECT tc.customer_id, tc.total_spent, ro.order_date, ro.amount
    FROM top_customers tc
    JOIN recent_orders ro ON tc.customer_id = ro.customer_id;
    """,

    # 24. LEAD & LAG window functions
    """
    SELECT 
        employee_id, 
        salary, 
        LAG(salary, 1) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_salary, 
        LEAD(salary, 1) OVER (PARTITION BY department_id ORDER BY hire_date) AS next_salary 
    FROM employees;
    """,

    # 25. PERCENT_RANK window function
    """
    SELECT 
        employee_id, 
        department_id, 
        salary, 
        PERCENT_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank 
    FROM employees;
    """,

    # 26. NTILE function for quartiles
    """
    SELECT 
        employee_id, 
        salary, 
        NTILE(4) OVER (ORDER BY salary) AS quartile 
    FROM employees;
    """,

    # 27. Recursive CTE for hierarchy traversal (Organizational Structure)
    """
    WITH RECURSIVE employee_hierarchy AS (
        SELECT employee_id, manager_id, name, 1 AS level 
        FROM employees WHERE manager_id IS NULL
        UNION ALL
        SELECT e.employee_id, e.manager_id, e.name, eh.level + 1 
        FROM employees e
        JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
    )
    SELECT * FROM employee_hierarchy;
    """,

    # 28. Deleting duplicates using CTE
    """
    WITH duplicate_cte AS (
        SELECT 
            ROW_NUMBER() OVER (PARTITION BY column1, column2 ORDER BY id) AS row_num, 
            id 
        FROM table_name
    )
    DELETE FROM table_name WHERE id IN (SELECT id FROM duplicate_cte WHERE row_num > 1);
    """,

    # 29. Dynamic Pivot Table (using CASE WHEN)
    """
    SELECT 
        employee_id, 
        SUM(CASE WHEN department = 'Sales' THEN salary ELSE 0 END) AS Sales_Salary,
        SUM(CASE WHEN department = 'IT' THEN salary ELSE 0 END) AS IT_Salary,
        SUM(CASE WHEN department = 'HR' THEN salary ELSE 0 END) AS HR_Salary
    FROM employees
    GROUP BY employee_id;
    """,

    # 30. Recursive Fibonacci series using SQL
    """
    WITH RECURSIVE Fibonacci AS (
        SELECT 0 AS n, 0 AS fibonacci
        UNION ALL
        SELECT 1, 1
        UNION ALL
        SELECT n + 1, f1.fibonacci + f2.fibonacci
        FROM Fibonacci f1, Fibonacci f2
        WHERE f1.n + 1 = f2.n
        LIMIT 10
    )
    SELECT * FROM Fibonacci;
    """
]


    for query in test_queries:
        print("*" * 50)
        print(query)
        print("-" * 50)
        info_map = parse_query(query)
        for alias, details in info_map.items():
            print(f"Alias/Table: {alias}")
            print(f"  -> Underlying: {details['table_name']}")
            print(f"  -> Columns: {details['columns']}")
        print()


ouput=["""**************************************************
SELECT column1, column2, column3 FROM table_name;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3']

**************************************************
SELECT column1, column2 FROM table_name WHERE column3 = 'value';
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3']

**************************************************
SELECT column1, column2, column3 FROM table_name ORDER BY column1 ASC, column2 DESC;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3', 'column1', 'column2']

**************************************************
SELECT DISTINCT column1, column2 FROM table_name;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2']

**************************************************
SELECT column1, COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) > 1;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column1', 'column2']

**************************************************
SELECT column1, column2 FROM table_name LIMIT 10;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2']

**************************************************
SELECT a.column1, b.column2 FROM table1 a INNER JOIN table2 b ON a.common_column = b.common_column;
--------------------------------------------------
Alias/Table: a
  -> Underlying: table1
  -> Columns: ['column1', 'common_column']
Alias/Table: b
  -> Underlying: table2
  -> Columns: ['column2', 'common_column']

**************************************************
SELECT a.column1, b.column2 FROM table1 a LEFT JOIN table2 b ON a.common_column = b.common_column;
--------------------------------------------------
Alias/Table: a
  -> Underlying: table1
  -> Columns: ['column1', 'common_column']
Alias/Table: b
  -> Underlying: table2
  -> Columns: ['column2', 'common_column']

**************************************************
SELECT a.column1, b.column2 FROM table1 a RIGHT JOIN table2 b ON a.common_column = b.common_column;
--------------------------------------------------
Alias/Table: a
  -> Underlying: table1
  -> Columns: ['column1', 'common_column']
Alias/Table: b
  -> Underlying: table2
  -> Columns: ['column2', 'common_column']

**************************************************
SELECT a.column1, b.column2 FROM table1 a FULL OUTER JOIN table2 b ON a.common_column = b.common_column;
--------------------------------------------------
Alias/Table: a
  -> Underlying: table1
  -> Columns: ['column1', 'common_column']
Alias/Table: b
  -> Underlying: table2
  -> Columns: ['column2', 'common_column']

**************************************************
SELECT column1, column2 FROM table1 UNION SELECT column1, column2 FROM table2;
--------------------------------------------------
Alias/Table: table1
  -> Underlying: table1
  -> Columns: []
Alias/Table: table2
  -> Underlying: table2
  -> Columns: ['column1', 'column2', 'column1', 'column2']

**************************************************
SELECT column1, column2 FROM table_name WHERE column3 = (SELECT MAX(column3) FROM table_name);
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3', 'column3']

**************************************************
SELECT column1, CASE WHEN column2 > 10 THEN 'High' ELSE 'Low' END AS category FROM table_name;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2']

**************************************************
SELECT column1, column2 FROM table_name WHERE column3 IN ('value1', 'value2', 'value3');
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3']

**************************************************
SELECT column1, column2 FROM table_name WHERE column3 BETWEEN '2023-01-01' AND '2023-12-31';
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3']

**************************************************
SELECT column1, column2 FROM table_name WHERE column3 LIKE 'prefix%';
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column3']

**************************************************
SELECT SUM(column1) AS total, AVG(column2) AS average FROM table_name;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2']

**************************************************
SELECT column1, column2, ROW_NUMBER() OVER (PARTITION BY column1 ORDER BY column2) AS row_num FROM table_name;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1', 'column2', 'column1', 'column2']

**************************************************
SELECT a.column1, b.column2 FROM table1 a CROSS JOIN table2 b;
--------------------------------------------------
Alias/Table: a
  -> Underlying: table1
  -> Columns: ['column1']
Alias/Table: b
  -> Underlying: table2
  -> Columns: ['column2']

**************************************************
SELECT column1, column2 FROM table_name WHERE EXISTS (SELECT 1 FROM another_table WHERE another_table.column3 = table_name.column3);
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column3']
Alias/Table: another_table
  -> Underlying: another_table
  -> Columns: ['column3']

**************************************************
SELECT column1, (SELECT COUNT(*) FROM another_table WHERE another_table.column2 = table_name.column1) AS count_column FROM table_name;
--------------------------------------------------
Alias/Table: table_name
  -> Underlying: table_name
  -> Columns: ['column1']
Alias/Table: another_table
  -> Underlying: another_table
  -> Columns: ['column2']
"""]
